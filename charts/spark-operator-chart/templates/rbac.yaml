{{- if or .Values.rbac.create .Values.rbac.createClusterRole }}
{{- $watchNs := (first .Values.sparkJobNamespace ) -}}
apiVersion: rbac.authorization.k8s.io/v1
kind: {{ ternary "ClusterRole" "Role" ( eq $watchNs "") }}
metadata:
  name: {{ include "spark-operator.fullname" . }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-failed, before-hook-creation
  labels:
    {{- include "spark-operator.labels" . | nindent 4 }}
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - services
  - configmaps
  - secrets
  verbs:
  - create
  - get
  - delete
  - update
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - get
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - resourcequotas
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - update
  - delete
  {{- if (eq $watchNs "") }}
  # webhook stuff, enable if cluster role
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - create
  - get
  - update
  - delete
  {{- end }}
- apiGroups:
  - sparkoperator.k8s.io
  resources:
  - sparkapplications
  - sparkapplications/status
  - scheduledsparkapplications
  - scheduledsparkapplications/status
  verbs:
  - "*"
  {{- if .Values.batchScheduler.enable }}
  # required for the `volcano` batch scheduler
- apiGroups:
  - scheduling.incubator.k8s.io
  - scheduling.sigs.dev
  - scheduling.volcano.sh
  resources:
  - podgroups
  verbs:
  - "*"
  {{- end }}
  {{ if .Values.webhook.enable }}
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - delete
  {{- end }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: {{ ternary "ClusterRoleBinding" "RoleBinding" ( eq $watchNs "") }}
metadata:
  name: {{ include "spark-operator.fullname" . }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-failed, before-hook-creation
  labels:
    {{- include "spark-operator.labels" . | nindent 4 }}
subjects:
  - kind: ServiceAccount
    name: {{ include "spark-operator.serviceAccountName" . }}
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: {{ ternary "ClusterRole" "Role" ( eq $watchNs "") }}
  name: {{ include "spark-operator.fullname" . }}
  apiGroup: rbac.authorization.k8s.io
{{- end }}




{{- if (neq $watchNs "") }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "spark-operator.fullname" . }}-webhook
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-failed, before-hook-creation
  labels:
    {{- include "spark-operator.labels" . | nindent 4 }}
rules:
  # webhook stuff, enable if cluster role
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - create
  - get
  - update
  - delete


---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "spark-operator.fullname" . }}-webhook-rolebinding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flink-operator-webhook-role
subjects:
  - kind: ServiceAccount
    name: {{ include "spark-operator.serviceAccountName" . }}
    namespace: {{ .Release.Namespace }}


{{- end }}